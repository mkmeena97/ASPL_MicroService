package com.example.demo.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import com.example.demo.entities.Book;
import com.example.demo.repositories.BookRepository;
import com.example.demo.services.BookService;

class BookServiceTest {

    @InjectMocks
    private BookService bookService;

    @Mock
    private BookRepository bookRepository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllBooks() {
        // Arrange
        List<Book> mockBooks = List.of(
                createBook("Book One", "Author One", "Fiction", 5),
                createBook("Book Two", "Author Two", "Non-Fiction", 3)
        );

        when(bookRepository.findAll()).thenReturn(mockBooks);

        // Act
        ResponseEntity<List<Book>> response = bookService.getAllBooks();

        // Assert
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(2, response.getBody().size());
        verify(bookRepository, times(1)).findAll();
    }

    @Test
    void testGetAllBooks_Exception() {
        // Arrange
        when(bookRepository.findAll()).thenThrow(new RuntimeException("Database error"));

        // Act
        ResponseEntity<List<Book>> response = bookService.getAllBooks();

        // Assert
        assertEquals(500, response.getStatusCodeValue());
        verify(bookRepository, times(1)).findAll();
    }

    @Test
    void testAddBook() {
        // Arrange
        Book newBook = createBook("Book Three", "Author Three", "Science", 7);

        when(bookRepository.save(any(Book.class))).thenReturn(newBook);

        // Act
        ResponseEntity<Map<String, Object>> response = bookService.addBook(newBook);

        // Assert
        assertEquals(201, response.getStatusCodeValue());
        assertEquals("Book added successfully.", response.getBody().get("message"));
        verify(bookRepository, times(1)).save(any(Book.class));
    }

    @Test
    void testAddBook_Exception() {
        // Arrange
        Book newBook = createBook("Book Four", "Author Four", "History", 2);

        when(bookRepository.save(any(Book.class))).thenThrow(new RuntimeException("DB Save Error"));

        // Act
        ResponseEntity<Map<String, Object>> response = bookService.addBook(newBook);

        // Assert
        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().get("message").toString().contains("An error occurred"));
        verify(bookRepository, times(1)).save(any(Book.class));
    }

    // Helper method to create a Book with a UUID
    private Book createBook(String title, String author, String category, int availableCopies) {
        Book book = new Book();
        book.setBookId(UUID.randomUUID().toString());
        book.setTitle(title);
        book.setAuthor(author);
        book.setCategory(category);
        book.setAvailableCopies(availableCopies);
        return book;
    }
}